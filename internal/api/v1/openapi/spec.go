// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVTYvcRhD9K00lEBu0MxqbXHQzJDELDlkcgg9mMT3qkqaM+sPVJa+HRf89dEuakWe0",
	"mL35tD1dpfdeVfWrfYTa2+AdOolQPUKsD2h1Pv7J7DkdAvuALIT5uvYG01+DsWYKQt5BNSarHCug8Wy1",
	"QAXk5PUrKECOAcef2CLDUIDFGHX7JNAcPn0ahcm1MAwFMH7pidFA9REmwjn9fijgv4grqtFq6tLhAq8A",
	"MqvXTltcDYSDd7jSFuzW8a0mtxIYTqX5/WesJUNTLT2vgHea23U1Fg31djUkh97u3XrZa+yMLUVhnQbx",
	"yWjJhKdRposbIfvjmZCBqX3F1PY17PsrBQmHXOOzXJIuxf4+qg/eGeSm79Sbu1so4CtyHJ/KblNuyqTc",
	"B3Q6EFTwerPblFBA0HLIndsGH/puKib4KNcv7o0xUf1elGWpWDvjreojskInTBhVw96q9zmQ7je1t0nJ",
	"BjLvWNKtgQrufJS7mS2VHIN3cRzgq3J3TfxvX9cYY6rAYKP7TkZ/OUGXjzqEjurMsP0cvTsbNJ1+ZWyg",
	"gl+2ZwdvJ/tuR+/mln7P2Tv8FrAWNAqnnAJib63mY65h1K+MFr3XEdUDyWHZl5i/2D7MU8nltbjS1/co",
	"PbuotOooivLN+P2I6HOW7lRDnWB6R0o7o4JuyeWCr/v7FuXDmTXNmLVFSZKqj4/nFu7Ky6LfkSVRckDl",
	"ertHTlo4q0MziXqxu9mV5UtITxAq+NIjH9Ni0d/IJn/tyrIAS276Ne8H6BI0FIuxXO66obhsTNpQ6vYP",
	"JV5F0SyLqpVuBPlSxcSVk8m1n+akK9KzI5/DucfGMz5Bis4kylPOMzj/yqNV+2Pu8W9R5W2gXtQ64g25",
	"iC6S0Fd8+RT1tDyepry/sln5LAuRoI0/8lL+h3JemJpZH9es9W75yn8mU79F+d6CI4bodnbOEuyf2XRR",
	"6b3vRT0sTTeNZmHE67kvEMSreQFn/81r5Yx02pjD/fB/AAAA//8MC1D2jQgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
