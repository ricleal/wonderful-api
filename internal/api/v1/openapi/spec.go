// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVTY/bRgz9KwO2QBNAa8sJetEt6BcWaNFFip6CRTCWKJmp5iMklcYI9N+LGUm2a2tb",
	"7C0nj4Ycvkfykf4CdXAxePQqUH0BqQ/obD7+xBw4HSKHiKyE+boODabfBqVmikrBQzU5m2wroA3srEIF",
	"5PX1KyhAjxGnT+yQYSzAoYjtngy0mE9PRZl8B+NYAOPHgRgbqN7BDLi4P44F/Cm4whqdpT4druIVQM3q",
	"tbcOVw3xEDyulAX79fjOkl8xjKfUwv4D1ppDU60DrwTvLXfrbBw2NLhVkx4Gt/fraa+hM3YkyjY14n1j",
	"NQOeWpku7pTc//eEGpjLV8xlX4v9eMMgxSHfhkyXtE+2347mhx75LzFvHu6hgE/IMulktyk3ZaIdInob",
	"CSp4vdltSiggWj3ksm3r/DYdO9Rbrb1FHdiLsaYnURNaMwiymL9JDyZkL9ublnrFlKmxvjHRduRzHhvI",
	"4FNS9w1U8AvqxDaTYOtQkQWqdwm4tUOvUO3K4orFr+RIjR7Q+MHtkRMPzsywmQm92N3tyvIlpAJBBR8H",
	"5GOSvf1MLnV/V5YFOPLz16Je6FNoKOapvtDBaRLH4rooaX7M/Y9GgxG1rBcZG9sq8jWLGSs7k+/eL043",
	"oGe9PAdzj21gfAIUfZMgTz7PwPw5t9Xsj7nG34nJWjUvait4R17QCyl9wpdPQc/SfhryMeleYvAyTfGr",
	"spwWqFf0WY42xp7qnOf2gwR/3sDpRIouP/yWsYUKvtmed/V2XtTbvO7O42yZ7XGapWuVXSgcsnlW5DMY",
	"/ReR6e9iBXnw+DlirdgYnH0KkME5y8dpaP49ftm+jSEO/byEYpCV6X3TNGK+L8qyNGx9E1x+btArE4pp",
	"OTjzNhvS/aYOLi2R26l9CKIPC9pNy3a3wH8MdY3yVRVx4W8aq3ZvBacddlEXmaKq7ZaFdBn+96UiYuw+",
	"DGrqZY/Nap/32u0YXbzUYJau5XW2cDlHOZV5fBz/CQAA///quL2DeggAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
